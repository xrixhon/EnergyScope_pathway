################################################################################
################################################################################                                                    
##																			  ##
##                     			SETTING PROBLEM								  ##                                                    
##																			  ##
################################################################################
################################################################################

#Load Pathway specific set/param ...

model ses_main.mod;


data besTDs_main_data_Belgium_YearRelated.dat; # not TDs depending data
data besTDs_main_data_Belgium_NotYearRelated.dat; # not TDs depending data
data besTDs_main_data_Belgium_layers_in_out.dat; # not TDs depending data

# data ses_main_ForAllYears.dat; # not TDs depending data
# data ses_main_DefaultYear.dat; # not TDs depending data
# data ses_main_CopyPasteYears.dat; # not TDs depending data
data Package_Aging_part2_v4.dat;
data Package_Aging_part1.dat;

#Initilaisation:
model Initialisation_2015_v2.mod;


################################################################################
################################################################################                                                    
##																			  ##
##                      	SOLVER OPTIONS       							  ##                                                    
##																			  ##
################################################################################
################################################################################

option solver cplex;

option show_stats 1; # show statistics

option cplex_options  'mipdisplay 5 mipinterval 1000'; 
option log_file 'log.txt';   #write the log in a .txt file. Create the file before running.


option cplex_options $cplex_options 'mipgap 0.01 '; 
option cplex_options $cplex_options 'timelimit 600 '; 


/*
# Save pool of solutions
option cplex_options "poolstub=PoolSol poolcapacity=10 \
populate=1 poolintensity=4 poolreplace=2";
*/

################################################################################
################################################################################                                                    
##																			  ##
##                      	RUN & SAVE PATH      							  ##                                                    
##																			  ##
################################################################################
################################################################################


param PathName symbolic default "output";

# START : Tackle problem:
let f_min["YEAR_2015","DHN_DEEP_GEO"] := 0;
let fmin_perc["YEAR_2015","DHN_DEEP_GEO"] := 0;
# END


let gwp_limit["YEAR_2025"] := 95000;
let gwp_limit["YEAR_2035"] := 75000;
let gwp_limit["YEAR_2050"] := 15000;

let re_share_primary["YEAR_2015"] := 0.0;
let f_max["YEAR_2015","NUCLEAR"] := 5.925;
let f_max["YEAR_2020","NUCLEAR"] := 5.925;
let i_rate := 0.015;

for {p in PHASE} 
	{
	let max_inv_phase[p] := 1e9;
	}

let gwp_limit_transition := 1e15;#MIN : 1553027


		print PathName;

		# Saving and starting from last solution. Starting from last solution is not very efficient.
		# option cplex_options $cplex_options 'startsol ./output/solution.sol '; # to read previously existing file
		# option cplex_options $cplex_options 'endsol ./output/solution.sol '; # to write file 
		
		option times 1; # show time
		option gentimes 1; # show time

		option cplex_options 'iisfind=1';#To show the infeasible constraints

		solve;

   # Show the infeasible constraints
		#display {i in 1.._ncons: _con[i].iis <> 'non'} (_conname[i],_con[i].iis);
		#display {j in 1.._nvars: _var[j].iis <> 'non'} (_varname[j],_var[j].iis);

		display solve_result_num;
		display _solve_elapsed_time;

		## Saving sets and parameters to output file

		option times 0; # show time
		option gentimes 0; # show time

		

				if solve_result = "limit" # To avoid post treatment error
		then print "TIME OUT"; 
		else {
		
		print "%f\n",sum {y in YEARS} TotalGWP [y] * t_phase;
		
			let PathName := "output/";
			## Print Phase info to txt file.
			print "--------------SAVING PHASE -----------";
			printf "%s\t%s\t%s\t%s\n", "Phase", "Inv.", "Inv. max", "YEAR - 2015 = ?" > (PathName & "/phase.txt"); 
			for {p in PHASE}{
				printf "%s\t%.6f\t%.6f\t%.6f\n", p, Phase_investment[p], max_inv_phase[p], diff_2015_year[p]   >> (PathName & "/phase.txt");
			}
			print "--------------SAVING PHASE_AFTER -----------";
			printf "%s\t%s\t%s\t%s\n", "Phase", "Inv.", "Inv. max", "YEAR - 2015 = ?" > (PathName & "/phase_after.txt"); 
			for {p in PHASE_AFTER}{
				printf "%s\t%.6f\n", p, Phase_investment[p]   >> (PathName & "/phase_after.txt");
			}
			## Print Delta_change info to txt file.
			print "--------------SAVING Delta_change (phase) -----------";
			printf "TECH\t" > (PathName & "/Delta_change.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/Delta_change.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/Delta_change.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", Delta_change[p,j] >> (PathName & "/Delta_change.txt");
					#printf " %.6f\t", F_newBuild[p,j]  >> (PathName & "/Delta_change.txt");
				}
			}
			## Print REAL Delta_change info to txt file.
			print "--------------SAVING REAL Delta_change (phase) -----------";
			printf "TECH\t" > (PathName & "/REALDelta_change.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/REALDelta_change.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/REALDelta_change.txt");
				for {p in PHASE, y_start in PHASE_START[p], y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", (sum {t in PERIODS} F_Mult_t [y_start,j, t] * t_op[t]) - (sum {t in PERIODS} F_Mult_t [y_stop,j, t] * t_op[t]) >> (PathName & "/REALDelta_change.txt");
				}
			}
			## Print F_newBuild info to txt file.
			print "--------------SAVING F_newBuild (phase) -----------";
			printf "TECH\t" > (PathName & "/FnewCost.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/FnewCost.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/FnewCost.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_newBuild[p,j]*c_inv[y_stop,j]*annualised_factor[p] >> (PathName & "/FnewCost.txt");
					#printf " %.6f\t", F_newBuild[p,j]  >> (PathName & "/FnewCost.txt");
				}
			}
			## Print F_newBuild info to txt file.
			print "--------------SAVING F_newBuild (phase) -----------";
			printf "TECH\t" > (PathName & "/Fnew.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/Fnew.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/Fnew.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					#printf " %.6f\t", F_newBuild[p,j]*c_inv[y_stop,j]*annualised_factor[p] >> (PathName & "/Fnew.txt");
					printf " %.6f\t", F_newBuild[p,j]  >> (PathName & "/Fnew.txt");
				}
			}
			## Print F_old info to txt file.
			print "--------------SAVING F_old (phase) -----------";
			printf "TECH\t" > (PathName & "/F_old.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/F_old.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_old.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_old[p,j] >> (PathName & "/F_old.txt");
					#printf " %.6f\t", F_old[p,j]  >> (PathName & "/F_old.txt");
				}
			}
			
			## Print F_old_delta_plus info to txt file.
		/*
			print "--------------SAVING F_old_delta_plus (phase) -----------";
			printf "TECH\t" > (PathName & "/F_old_delta_plus.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/F_old_delta_plus.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_old_delta_plus.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_old_delta_plus[p,j] >> (PathName & "/F_old_delta_plus.txt");
					#printf " %.6f\t", F_old_delta_plus[p,j]  >> (PathName & "/F_old_delta_plus.txt");
				}
			}
			
			## Print F_old_delta_moins info to txt file.
			print "--------------SAVING F_old_delta_moins (phase) -----------";
			printf "TECH\t" > (PathName & "/F_old_delta_moins.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/F_old_delta_moins.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_old_delta_moins.txt");
				for {p in PHASE, y_stop in PHASE_STOP[p]}{
					printf " %.6f\t", F_old_delta_moins[p,j] >> (PathName & "/F_old_delta_moins.txt");
					#printf " %.6f\t", F_old_delta_moins[p,j]  >> (PathName & "/F_old_delta_moins.txt");
				}
			}
		*/
		
			## Print F_decomm info to txt file.
			print "--------------SAVING F_newBuild (phase) -----------";
			printf "TECH\t" > (PathName & "/F_decomm.txt");
			for {p in {{"2010_2015"} union PHASE}}{
				printf "%s\t", p >> (PathName & "/F_decomm.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_decomm.txt");
				for {p in PHASE }{
					for {pbuilt in {{"2010_2015"} union PHASE}}{
						printf " %.6f\t", F_decommissioning[p,pbuilt,j]  >> (PathName & "/F_decomm.txt");
					}
				}
			}
			## Print F_decomm_ALL info to txt file.
			print "--------------SAVING F_decomm_ALL (phase) -----------";
			printf "TECH\t" > (PathName & "/F_decomm_ALL.txt");
			for {p in PHASE }{
				printf "%s\t", p >> (PathName & "/F_decomm_ALL.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_decomm_ALL.txt");
				for {p in PHASE }{

					printf " %.6f\t", sum {p2 in PHASE} F_decommissioning[p,p2,j]  >> (PathName & "/F_decomm_ALL.txt");
				}
			}
			
			## Print F_years info to txt file.
			print "--------------SAVING F (years) -----------";
			printf "TECH\t" > (PathName & "/F_years.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/F_years.txt");
			}
			for {j in TECHNOLOGIES}{
				printf "\n %s\t",j  >> (PathName & "/F_years.txt");
				for {y in YEARS }{
					printf " %.6f\t", F_Mult [y,j]  >> (PathName & "/F_years.txt");
				}
			}
			
			## Print Ressources over Phase info to txt file.
			print "--------------SAVING Ressources over phase -----------";
			printf "RESOURCES\t MAX [TWh]\t" > (PathName & "/RES.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/RES.txt");
			}
			for {i in RESOURCES}{
				printf "\n %s\t",i  >> (PathName & "/RES.txt");
				printf "%.6f\t",avail ["YEAR_2015",i]   >> (PathName & "/RES.txt");
				for {y in YEARS}{
					printf " %.6f\t",sum {t in PERIODS} (F_Mult_t [y,i, t] * t_op [t])  >> (PathName & "/RES.txt");
				}
			}
			
			
			
			
			## Print Ressources over Phase info to txt file.
			print "--------------SAVING Mob public shares -----------";
			printf "Tech\t" > (PathName & "/Mob_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/Mob_shares.txt");
			}
			for {tech in TECHNOLOGIES_OF_END_USES_TYPE["MOB_PUBLIC"]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS}
					F_Mult_t [y,tech, t] * t_op[t] >> (PathName & "/Mob_shares.txt");
			}}
			for {tech in TECHNOLOGIES_OF_END_USES_TYPE["MOB_PRIVATE"]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS}
					F_Mult_t [y,tech, t] * t_op[t] >> (PathName & "/Mob_shares.txt");
			}}
			for {euc in END_USES_TYPES_OF_CATEGORY["MOBILITY_FREIGHT"], tech in TECHNOLOGIES_OF_END_USES_TYPE[euc]}{
				printf "\n %s \t", tech >> (PathName & "/Mob_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS}
					F_Mult_t [y,tech, t] * t_op[t] >> (PathName & "/Mob_shares.txt");
			}}
					
						print "--------------SAVING LT_DEC shares -----------";
			printf "Tech\t" > (PathName & "/LTDec_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/LTDec_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/LTDec_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS}
					layers_in_out [tech,"HEAT_LOW_T_DHN"] * F_Mult_t [y,tech, t] * t_op[t] >> (PathName & "/LTDec_shares.txt");
			}}
			## 
			print "--------------SAVING LT_DHN shares -----------";
			printf "Tech\t" > (PathName & "/LTDHN_shares.txt");
			for {y in YEARS }{
				printf "%s\t", y >> (PathName & "/LTDHN_shares.txt");
			}
			for {tech in TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", tech >> (PathName & "/LTDHN_shares.txt");
				for {y in YEARS }{
					printf " %f\t",  sum {t in PERIODS}
					layers_in_out [tech,"HEAT_LOW_T_DECEN"] * F_Mult_t [y,tech, t] * t_op[t] >> (PathName & "/LTDHN_shares.txt");
			}}
			


			
			for {y in YEARS}{ 
			################################################################################
			################################################################################                                                    
			##																			  ##
			##                     			SAVING RESULTS								  ##                                                    
			##																			  ##
			################################################################################
			################################################################################
			let PathName := "output/"&y;	
			print PathName;


			## Saving sets and parameters to output file
			option show_stats 0; # show statistics
			option times 0; # show time
			option gentimes 0; # show time

			## Print cost breakdown to txt file.
			print "--------------SAVING COSTS -----------";
			printf "%s\t%s\t%s\t%s\n", "Name", "C_inv", "C_maint", "C_op" > (PathName & "/cost_breakdown.txt"); 
			for {i in TECHNOLOGIES union RESOURCES}{
				printf "%s\t%.6f\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then (tau[y,i] * C_inv[y,i]) else 0, if i in TECHNOLOGIES then C_maint [y,i] else 0, if i in RESOURCES then C_op [y,i] else 0 >> (PathName & "/cost_breakdown.txt");
			}

						
			## Print resources breakdown to txt file.
			print "--------------SAVING RESOURCES -----------";
			printf "%s\t%s\t%s\n", "Name", "Used", "Potential" > (PathName & "/resources_breakdown.txt"); 
			for {i in RESOURCES}{
				printf "%s\t%.6f\t%.6f\n", i, sum {t in PERIODS} (F_Mult_t [y,i, t] * t_op [t]) , avail [y,i] >> (PathName & "/resources_breakdown.txt");
			}


			## Print GWP breakdown
			print "--------------SAVING GWP -----------";
			printf "%s\t%s\t%s\n", "Name", "GWP_constr", "GWP_op" > (PathName & "/gwp_breakdown.txt"); 
			for {i in TECHNOLOGIES union RESOURCES}{
				printf "%s\t%.6f\t%.6f\n", i, if i in TECHNOLOGIES then GWP_constr [y,i] / lifetime [y,i] else 0, if i in RESOURCES then GWP_op [y,i] else 0 >> (PathName & "/gwp_breakdown.txt");
			}

			## Print losses to txt file
			print "--------------SAVING Losses -----------";
			printf "%s\t%s\n", "End use", "Losses" > (PathName & "/losses.txt");
			for {i in END_USES_TYPES}{
					printf "%s\t%.3f\n",i,  sum{t in PERIODS }(Network_losses [y,i,t] * t_op [t])  >> (PathName & "/losses.txt");
			}

			## Print ASSETS to txt file
			print "--------------SAVING ASSETS -----------";
			printf "TECHNOLOGIES\t c_inv\t c_maint\t lifetime\t  f_min\t f\t f_max\t fmin_perc\t" > (PathName & "/assets.txt"); 
			printf "f_perc\t fmax_perc\t c_p\t c_p_max\t tau\t gwp_constr" > (PathName & "/assets.txt"); # Must be split in 2 parts, otherwise too long for GLPK
			printf "\n UNITS\t[MCHCapitalf/GW]\t [MCHCapitalf/GW]\t [y]\t [GW or GWh]\t" >> (PathName & "/assets.txt"); 
			printf " [GW or GWh]\t [GW or GWh]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [0-1]\t [-]\t [ktCO2-eq./GW or GWh] " >> (PathName & "/assets.txt"); 
			for {i in END_USES_TYPES, tech in TECHNOLOGIES_OF_END_USES_TYPE[i]}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F_Mult [y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			sum {t in PERIODS} (F_Mult_t [y,tech,t] ) / sum {j2 in 
			TECHNOLOGIES_OF_END_USES_TYPE[i], t2 in PERIODS} (F_Mult_t [y,j2, t2] ),fmax_perc[y,tech],
			sum {t in PERIODS} (F_Mult_t [y,tech,t] * t_op[t]) / 8760 / max(F_Mult [y,tech],0.0001),
			c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt");
			}
			for {tech in STORAGE_TECH}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F_Mult [y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			-1,
			fmax_perc[y,tech],
			sum {t in PERIODS,l in LAYERS: storage_eff_out [y,tech,l] > 0} -min(0,Storage_Out [y,tech, l, t] / storage_eff_out [y,tech, l] - Storage_In [y,tech, l, t] * storage_eff_in [y,tech, l]) / 8760 / max(F_Mult [y,tech],0.0001)
			,c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt"); 
			}
			for {tech in INFRASTRUCTURE}{
				printf "\n%s\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t",tech,
			C_inv[y,tech],C_maint[y,tech],lifetime[y,tech],f_min[y,tech],F_Mult [y,tech],f_max[y,tech],
			fmin_perc[y,tech],
			-1,
			fmax_perc[y,tech],
			sum {t in PERIODS} (F_Mult_t [y,tech,t] * t_op[t]) / 8760 / max(F_Mult [y,tech],0.0001)
			,c_p[y,tech],tau[y,tech],GWP_constr[y,tech] >> (PathName & "/assets.txt"); 
			}

			/* To save time 
			#    STORAGE distribution CURVES
			print "--------------SAVING STORAGE -----------";
			printf "Time\t" > (PathName & "/hourly_data/energy_stored.txt");
			for {i in STORAGE_TECH }{
				printf "%s\t", i >> (PathName & "/hourly_data/energy_stored.txt");
			}
			for {i in STORAGE_TECH }{
				printf "%s_in\t" , i >> (PathName & "/hourly_data/energy_stored.txt");
				printf "%s_out\t", i >> (PathName & "/hourly_data/energy_stored.txt");
			}
			for {t in PERIODS}{
				printf "\n %d\t",t  >> (PathName & "/hourly_data/energy_stored.txt");
				for {i in STORAGE_TECH}{
					if F_Mult [y,i]=0 then
						printf "\t" >> (PathName & "/hourly_data/energy_stored.txt");
					else
						printf "%f\t", Storage_level[i, t] >> (PathName & "/hourly_data/energy_stored.txt");
				}
				for {i in STORAGE_TECH}{
					if F_Mult [y,i]=0 then
						printf "\t\t" >> (PathName & "/hourly_data/energy_stored.txt");
					else {
						printf "%f\t", (sum {l in LAYERS: storage_eff_in [y,i,l] > 0}-(Storage_In [y,i, l, t] * storage_eff_in [y,i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
						printf "%f\t", (sum {l in LAYERS: storage_eff_in [y,i,l] > 0}	(Storage_Out [y,i, l, t] / storage_eff_out [y,i, l]))	>> (PathName & "/hourly_data/energy_stored.txt");
					}
				}
			}

			# LAYERS FLUXES
			print "--------------SAVING LAYERS -----------";
				for {l in LAYERS}{
				printf "Td \t Time\t" > (PathName & "/hourly_data/layer_" & l &".txt"); 
				for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH }{
					printf "%s\t",i >> (PathName & "/hourly_data/layer_" & l &".txt"); 
				}
				for {j in STORAGE_TECH }{
					printf "%s_Pin\t",j >> (PathName & "/hourly_data/layer_" & l &".txt"); 
					printf "%s_Pout\t",j >> (PathName & "/hourly_data/layer_" & l &".txt"); 
				}
				printf "END_USE\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
	
				for {td in TYPICAL_DAYS, h in HOURS}{
					printf "\n %d \t %d\t",td,h   >> (PathName & "/hourly_data/layer_" & l &".txt"); 
					for {i in RESOURCES}{
						if layers_in_out[i, l] = 0 then # Incompatible
							printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
						else 	
							printf "%f\t",(layers_in_out[i, l] *F_Mult_t [y,i, t]) >> (PathName & "/hourly_data/layer_" & l &".txt"); 								
					}
					for {i in TECHNOLOGIES diff STORAGE_TECH}{
						if layers_in_out[i, l] = 0 then # Incompatible
							printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
						else{ 	
							if F_Mult [y,i] = 0 then #No technology installed
								printf "\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
							else {
								printf "%f\t",(layers_in_out[i, l] *F_Mult_t [y,i, t]) >> (PathName & "/hourly_data/layer_" & l &".txt"); 
						}}							
					}
					for {j in STORAGE_TECH}{
						if storage_eff_in[j, l] = 0 then # Incompatible
							printf "\t\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
						else { 	
							if F_Mult [y,j] = 0 then #No storage
								printf "\t\t" >> (PathName & "/hourly_data/layer_" & l &".txt"); 
							else {
								printf "%f\t",(-Storage_In [y,j, l, t]) >> (PathName & "/hourly_data/layer_" & l &".txt"); 
								printf "%f\t", (Storage_Out [y,j, l, t])>> (PathName & "/hourly_data/layer_" & l &".txt"); 
						}}		
					}
					printf "%f\t", -End_Uses [y,l, t]  >> (PathName & "/hourly_data/layer_" & l &".txt"); 
				}
			}
			*/ 

			
			## Energy yearly balance
			printf "Tech\t" > (PathName & "/year_balance.txt");
			for {l in LAYERS}{
				printf "%s\t",l >> (PathName & "/year_balance.txt");
			}
			for {i in RESOURCES union TECHNOLOGIES diff STORAGE_TECH}{
				printf "\n %s \t", i >> (PathName & "/year_balance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS}
			layers_in_out[i, l] *F_Mult_t [y,i, t] * t_op[t] >> (PathName & "/year_balance.txt");
				}
			}
			for {j in STORAGE_TECH}{
				printf "\n %s \t", j >> (PathName & "/year_balance.txt");
				for {l in LAYERS}{
					printf " %f\t", sum {t in PERIODS}
			(Storage_Out [y,j, l, t] - Storage_In [y,j, l, t]) * t_op[t] >> (PathName & "/year_balance.txt");
				}
			}
			printf "\n END_USES_DEMAND \t" >> (PathName & "/year_balance.txt");
			for {l in LAYERS}{
				printf " %f\t", sum {t in PERIODS}
					End_Uses [y,l, t] * t_op[t] >> (PathName & "/year_balance.txt");
			}


			################################################################################
			################################################################################                                                    
			##																			  ##
			##                     			    SANKEY 	     							  ##                                                    
			##																			  ##
			################################################################################
			################################################################################

	/*

			print "--------- SAVING SANKEY --------";

			## Generate CSV file to be used as input to Sankey diagram
			# Notes:
			# - Assuming that SNG and BioOil are used in boilers
			printf "%s,%s,%s,%s,%s,%s\n", "source" , "target", "realValue", "layerID", "layerColor", "layerUnit" > (PathName & "/input2sankey.csv");
			
			#------------------------------------------
			# SANKEY - RESOURCES
			#------------------------------------------
			## Gasoline
			if sum{t in PERIODS}
				(F_Mult_t [y,"GASOLINE", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasoline" , "Mob priv", sum{t in PERIODS}
										(layers_in_out["GASOLINE","GASOLINE"] *F_Mult_t [y,"GASOLINE", t]  ) / 1000 , "Gasoline", 
			"#808080", "TWh" > (PathName & "/input2sankey.csv");
			
			## Diesel
			if sum{t in PERIODS}(F_Mult_t [y,"CAR_DIESEL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob priv", sum{t in PERIODS, t
			}(-layers_in_out["CAR_DIESEL","DIESEL"] *F_Mult_t [y,"CAR_DIESEL", t]  ) / 1000 , "Diesel", 
			"#D3D3D3", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS} ((F_Mult_t [y,"BUS_COACH_DIESEL", t] + 
			F_t[y,"BUS_COACH_HYDIESEL", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Mob public", sum{t in PERIODS, t
			}(-layers_in_out["BUS_COACH_DIESEL","DIESEL"] *F_Mult_t [y,"BUS_COACH_DIESEL", t]   - 
			layers_in_out["BUS_COACH_HYDIESEL","DIESEL"] *F_Mult_t [y,"BUS_COACH_HYDIESEL", t]   ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS} ((F_Mult_t [y,"TRUCK_DIESEL", t] +F_Mult_t [y,"BOAT_FREIGHT_DIESEL", t] )  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Diesel" , "Freight", sum{t in PERIODS, t
			}(-layers_in_out["TRUCK_DIESEL","DIESEL"] *F_Mult_t [y,"TRUCK_DIESEL", t]  -layers_in_out["BOAT_FREIGHT_DIESEL","DIESEL"] *F_Mult_t [y,"BOAT_FREIGHT_DIESEL", t]  ) / 1000 , "Diesel", "#D3D3D3", "TWh" 
			> (PathName & "/input2sankey.csv");
			
			## Natural Gas
			if sum {t in PERIODS} (F_Mult_t [y,"NG", t] * t_op [t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "NG imports" , "Gas", sum{t in PERIODS, t
			}(F_Mult_t [y,"NG", t] * t_op [t]) / 1000 , "Gas", "#FFD700", "TWh" > 
			(PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}(F_Mult_t [y,"CAR_NG", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Mob priv", sum{t in PERIODS, t
			}(-layers_in_out["CAR_NG","NG"] *F_Mult_t [y,"CAR_NG", t]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			(PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}(F_Mult_t [y,"BUS_COACH_CNG_STOICH", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Mob public", sum{t in PERIODS, t
			}(-layers_in_out["BUS_COACH_CNG_STOICH","NG"] *F_Mult_t [y,"BUS_COACH_CNG_STOICH", t]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}(F_Mult_t [y,"BOAT_FREIGHT_NG", t] +F_Mult_t [y,"TRUCK_NG", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Freight", sum{t in PERIODS, t
			}(-layers_in_out["BOAT_FREIGHT_NG","NG"] *F_Mult_t [y,"BOAT_FREIGHT_NG", t] -layers_in_out["TRUCK_NG","NG"] *F_Mult_t [y,"TRUCK_NG", t]  ) / 1000 , 
			"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}(F_Mult_t [y,"H2_NG", t]  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "H2 prod", sum{t in PERIODS, t
			}(-layers_in_out["H2_NG","NG"] *F_Mult_t [y,"H2_NG", t]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			(PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod", "H2", sum{t in PERIODS, t
			}(layers_in_out["H2_NG","H2"] *F_Mult_t [y,"H2_NG", t]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv")};
			
			if sum{t in PERIODS}(F_Mult_t [y,"CCGT", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Elec", sum{t in PERIODS, t
			}(-layers_in_out["CCGT","NG"] *F_Mult_t [y,"CCGT", t]  ) / 1000 , "NG", "#FFD700", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_COGEN_GAS", t] +F_Mult_t [y,"DHN_COGEN_GAS", h, 
			td] +F_Mult_t [y,"DEC_COGEN_GAS", t] +F_Mult_t [y,"DEC_ADVCOGEN_GAS", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "CHP", sum{t in PERIODS, t
			}(-layers_in_out["IND_COGEN_GAS","NG"] *F_Mult_t [y,"IND_COGEN_GAS", t]   - 
			layers_in_out["DHN_COGEN_GAS","NG"] *F_Mult_t [y,"DHN_COGEN_GAS", t]   - layers_in_out["DEC_COGEN_GAS","NG"] *F_Mult_t 
			[y,"DEC_COGEN_GAS", t]   - layers_in_out["DEC_ADVCOGEN_GAS","NG"] *F_Mult_t [y,"DEC_ADVCOGEN_GAS", t]  ) / 
			1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"DEC_THHP_GAS", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "HPs", sum{t in PERIODS, t
			}(-layers_in_out["DEC_THHP_GAS","NG"] *F_Mult_t [y,"DEC_THHP_GAS", t]  ) / 1000 , "NG", "#FFD700", 
			"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_BOILER_GAS", t] +F_Mult_t [y,"DHN_BOILER_GAS", 
			t] +F_Mult_t [y,"DEC_BOILER_GAS", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Boilers", sum{t in PERIODS, t
			}(-layers_in_out["IND_BOILER_GAS","NG"] *F_Mult_t [y,"IND_BOILER_GAS", t]   - 
			layers_in_out["DHN_BOILER_GAS","NG"] *F_Mult_t [y,"DHN_BOILER_GAS", t]   - layers_in_out["DEC_BOILER_GAS","NG"] *F_Mult_t 
			[y,"DEC_BOILER_GAS", t]  ) / 1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			
			## Electricity production
			if sum{t in PERIODS}(F_Mult_t [y,"ELECTRICITY", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electricity" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["ELECTRICITY","ELECTRICITY"] *F_Mult_t [y,"ELECTRICITY", t]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"NUCLEAR", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Nuclear" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["NUCLEAR","ELECTRICITY"] *F_Mult_t [y,"NUCLEAR", t]  ) / 1000 , "Nuclear", 
			"#FFC0CB", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"WIND_ONSHORE", t] +F_Mult_t [y,"WIND_OFFSHORE", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wind" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["WIND_ONSHORE","ELECTRICITY"] *F_Mult_t [y,"WIND_ONSHORE", t] + layers_in_out["WIND_OFFSHORE","ELECTRICITY"] *F_Mult_t [y,"WIND_OFFSHORE", t]  ) / 1000 , "Wind", "#27AE34", "TWh" 
			> (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"HYDRO_RIVER", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Hydro River" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["HYDRO_RIVER","ELECTRICITY"] *F_Mult_t [y,"HYDRO_RIVER", t]   ) / 1000 , "Hydro River", "#0000FF", 
			"TWh" > (PathName & "/input2sankey.csv");
			
			# Coal
			if sum{t in PERIODS}((F_Mult_t [y,"COAL_US", t] +F_Mult_t [y,"COAL_IGCC", t]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Elec", sum{t in PERIODS, t
			}(-layers_in_out["COAL_US","COAL"] *F_Mult_t [y,"COAL_US", t]   - layers_in_out["COAL_IGCC","COAL"] 
			*F_Mult_t [y,"COAL_IGCC", t]  ) / 1000 , "Coal", "#A0522D", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"IND_BOILER_COAL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Coal" , "Boilers", sum{t in PERIODS, t
			}(-layers_in_out["IND_BOILER_COAL","COAL"] *F_Mult_t [y,"IND_BOILER_COAL", t]  ) / 1000 , "Coal", 
			"#A0522D", "TWh" > (PathName & "/input2sankey.csv");
			
			# Solar
			if sum{t in PERIODS}(F_Mult_t [y,"PV", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["PV","ELECTRICITY"] *F_Mult [y,"PV"] * c_p_t["PV",t]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #FromF_Mult_t ->F_Mult <=> taking into account curtailment
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"DEC_SOLAR", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Heat LT Dec", sum{t in PERIODS}
					(layers_in_out["DEC_SOLAR","HEAT_LOW_T_DECEN"] * (F_Mult_t [y,"DEC_SOLAR", t])# SUPPRESSED # - Solar_excess [ t] ) 
					-((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] )))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"DEC_SOLAR", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "Dec. Sto", sum{t in PERIODS}
					((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
					  (max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] ))
					)/ 1000
					, "Solar", "#FFFF00", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}(F_Mult_t [y,"DHN_SOLAR", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Solar" , "DHN", sum{t in PERIODS, t
			}(layers_in_out["DHN_SOLAR","HEAT_LOW_T_DHN"] *F_Mult [y,"DHN_SOLAR"] * c_p_t["DHN_SOLAR",t]  ) / 1000 , "Solar", "#FFFF00", "TWh" > #FromF_Mult_t ->F_Mult <=> taking into account curtailment
			(PathName & "/input2sankey.csv");		
			
			
			# Geothermal
			if sum{t in PERIODS}(F_Mult_t [y,"GEOTHERMAL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["GEOTHERMAL","ELECTRICITY"] *F_Mult_t [y,"GEOTHERMAL", t]  ) / 1000 , "Geothermal", 
			"#FF0000", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"DHN_DEEP_GEO", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Geothermal" , "DHN", sum{t in PERIODS, t
			}(layers_in_out["DHN_DEEP_GEO","HEAT_LOW_T_DHN"] *F_Mult_t [y,"DHN_DEEP_GEO", t]  ) / 1000 , 
			"Geothermal", "#FF0000", "TWh" > (PathName & "/input2sankey.csv");
			
			# Waste
			if sum{t in PERIODS}((F_Mult_t [y,"IND_COGEN_WASTE", t] +F_Mult_t 
			[y,"DHN_COGEN_WASTE", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "CHP", sum{t in PERIODS, t
			}(-layers_in_out["IND_COGEN_WASTE","WASTE"] *F_Mult_t [y,"IND_COGEN_WASTE", t]   
			-layers_in_out["DHN_COGEN_WASTE","WASTE"] *F_Mult_t [y,"DHN_COGEN_WASTE", t]  ) / 1000 , "Waste", "#808000", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"IND_BOILER_WASTE", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Waste" , "Boilers", sum{t in PERIODS, t
			}(-layers_in_out["IND_BOILER_WASTE","WASTE"] *F_Mult_t [y,"IND_BOILER_WASTE", t]  ) / 1000 , 
			"Waste", "#808000", "TWh" > (PathName & "/input2sankey.csv");
			
			# Oil
			if sum{t in PERIODS}((F_Mult_t [y,"DEC_COGEN_OIL", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "CHP", sum{t in PERIODS, t
			}(-layers_in_out["DEC_COGEN_OIL","LFO"] *F_Mult_t [y,"DEC_COGEN_OIL", t]  ) / 1000 , "Oil", 
			"#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_BOILER_OIL", t] +F_Mult_t [y,"DHN_BOILER_OIL", 
			t] +F_Mult_t [y,"DEC_BOILER_OIL", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Boilers", sum{t in PERIODS, t
			}(-layers_in_out["IND_BOILER_OIL","LFO"] *F_Mult_t [y,"IND_BOILER_OIL", t]   - 
			layers_in_out["DHN_BOILER_OIL","LFO"] *F_Mult_t [y,"DHN_BOILER_OIL", t]   - layers_in_out["DEC_BOILER_OIL","LFO"] * 
			F_Mult_t [y,"DEC_BOILER_OIL", t]  ) / 1000 , "Oil", "#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			
			# Wood
			if sum{t in PERIODS}(F_Mult_t [y,"H2_BIOMASS", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "H2 prod", sum{t in PERIODS, t
			}(-layers_in_out["H2_BIOMASS","WOOD"] *F_Mult_t [y,"H2_BIOMASS", t]  ) / 1000 , "Wood", "#CD853F", 
			"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"PYROLYSIS", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Biofuels", sum{t in PERIODS, t
			}( - layers_in_out["PYROLYSIS","WOOD"] *F_Mult_t [y,"PYROLYSIS", t]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_COGEN_WOOD", t] +F_Mult_t [y,"DHN_COGEN_WOOD", 
			t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "CHP", sum{t in PERIODS, t
			}(-layers_in_out["IND_COGEN_WOOD","WOOD"] *F_Mult_t [y,"IND_COGEN_WOOD", t]   - 
			layers_in_out["DHN_COGEN_WOOD","WOOD"] *F_Mult_t [y,"DHN_COGEN_WOOD", t]  ) / 1000 , "Wood", "#CD853F", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_BOILER_WOOD", t] +F_Mult_t 
			[y,"DHN_BOILER_WOOD", t] +F_Mult_t [y,"DEC_BOILER_WOOD", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Boilers", sum{t in PERIODS, t
			}(-layers_in_out["IND_BOILER_WOOD","WOOD"] *F_Mult_t [y,"IND_BOILER_WOOD", t]   - 
			layers_in_out["DHN_BOILER_WOOD","WOOD"] *F_Mult_t [y,"DHN_BOILER_WOOD", t]   - layers_in_out["DEC_BOILER_WOOD","WOOD"] * 
			F_Mult_t [y,"DEC_BOILER_WOOD", t]  ) / 1000 , "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}((F_Mult_t [y,"GASIFICATION_SNG", t] )  ) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wood" , "Gasifi.", sum{t in PERIODS}(-layers_in_out["GASIFICATION_SNG","WOOD"] *F_Mult_t [y,"GASIFICATION_SNG", t] ) / 1000 , "Wood", "#CD853F", "TWh" >(PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "Gas" , sum{t in PERIODS}(layers_in_out["GASIFICATION_SNG","NG"] *F_Mult_t [y,"GASIFICATION_SNG", t] ) / 1000 , "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "DHN" , sum{t in PERIODS}(layers_in_out["GASIFICATION_SNG","HEAT_LOW_T_DHN"] *F_Mult_t [y,"GASIFICATION_SNG", t]  ) / 1000, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv"); 
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gasifi." , "Elec", sum{t in PERIODS}(layers_in_out["GASIFICATION_SNG","ELECTRICITY"] *F_Mult_t [y,"GASIFICATION_SNG", t]  ) / 1000 ,  "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			}
			
			
			# WET Biomass
			if sum{t in PERIODS}(F_Mult_t [y,"DHN_COGEN_WET_BIOMASS", t]) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet biomass" , "CHP", sum{t in PERIODS, t
				}(-layers_in_out["DHN_COGEN_WET_BIOMASS","WET_BIOMASS"] *F_Mult_t [y,"DHN_COGEN_WET_BIOMASS", t] ) / 1000 
				, "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
			}
			if sum{t in PERIODS}(F_Mult_t [y,"BIOMETHANATION", t]) > 10 then {
				printf "%s,%s,%.2f,%s,%s,%s\n", "Wet biomass" , "Biomethanation", sum{t in PERIODS, t
				}(-layers_in_out["BIOMETHANATION","WET_BIOMASS"] *F_Mult_t [y,"BIOMETHANATION", t] ) / 1000 
				, "Wood", "#CD853F", "TWh" > (PathName & "/input2sankey.csv");
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biomethanation" , "Gas", sum{t in PERIODS, t
				}(layers_in_out["BIOMETHANATION","NG"] *F_Mult_t [y,"BIOMETHANATION", t] ) / 1000 ,
				"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			}
			
			#------------------------------------------
			# SANKEY - Electricity use
			#------------------------------------------
			if sum{t in PERIODS}((F_Mult_t [y,"CAR_PHEV", t] +F_Mult_t [y,"CAR_BEV", t]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob priv", sum{t in PERIODS, t
			}(-layers_in_out["CAR_PHEV","ELECTRICITY"] *F_Mult_t [y,"CAR_PHEV", t]   - 
			layers_in_out["CAR_BEV","ELECTRICITY"] *F_Mult_t [y,"CAR_BEV", t]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"TRAIN_PUB", t] +F_Mult_t [y,"TRAMWAY_TROLLEY", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Mob public", sum{t in PERIODS, t
			}(-layers_in_out["TRAIN_PUB","ELECTRICITY"] *F_Mult_t [y,"TRAIN_PUB", t]   - 
			layers_in_out["TRAMWAY_TROLLEY","ELECTRICITY"] *F_Mult_t [y,"TRAMWAY_TROLLEY", t]  ) / 1000 , "Electricity", "#00BFFF", 
			"TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"TRAIN_FREIGHT", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Freight", sum{t in PERIODS, t
			}(-layers_in_out["TRAIN_FREIGHT","ELECTRICITY"] *F_Mult_t [y,"TRAIN_FREIGHT", t]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(Network_losses [y,"ELECTRICITY", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Exp & Loss", sum{t in PERIODS}(Network_losses 
			[y,"ELECTRICITY", t]   - layers_in_out["ELEC_EXPORT","ELECTRICITY"] *F_Mult_t [y,"ELEC_EXPORT", t]  ) / 1000 
			, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			#In case of solar curtailment (F_Mult_t <F_Mult * c_p_t)
			if sum{t in PERIODS}(F_Mult [y,"PV"]*c_p_t["PV",t] -  F_t[y,"PV",t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Curt.", sum{t in PERIODS}
				(F_Mult [y,"PV"]*c_p_t["PV",t] -  F_t[y,"PV",t])  / 1000 
			, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");			
			if sum{t in PERIODS}(End_Uses [y,"ELECTRICITY", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Elec demand", sum{t in PERIODS}((End_Uses 
			[y,"ELECTRICITY", t]  - Network_losses [y,"ELECTRICITY", t] - sum {i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"]} (Storage_Out [y,i, "ELECTRICITY", t]))   
			)/ 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				
			# New boxes for Electricity storage
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS}(Storage_In [y,i, "ELECTRICITY", t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Storage", sum{t in PERIODS}       (sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }(Storage_In [y,i, "ELECTRICITY", t]))/ 1000 , "Electricity", "#00BFFF", 
			"TWh" > (PathName & "/input2sankey.csv");
			if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS}(Storage_In [y,i, "ELECTRICITY", t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Elec demand", sum{t in PERIODS}(sum {i 
			in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }                                                        (Storage_Out [y,i, "ELECTRICITY", t] / storage_eff_out [y,i, 
			"ELECTRICITY"])  )/ 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			#if sum{i in STORAGE_OF_END_USES_TYPES["ELECTRICITY"], t in PERIODS}(Storage_In [y,i, "ELECTRICITY", t]) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Storage" , "Exp & Loss", sum{t in PERIODS} (sum {i 
			#in STORAGE_OF_END_USES_TYPES["ELECTRICITY"] }((Storage_In [y,i, "ELECTRICITY", t])- (Storage_Out [y,i, "ELECTRICITY", t] / storage_eff_out [y,i, 
			#"ELECTRICITY"]))  )/ 1000 , "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				
			if sum{t in PERIODS}((F_Mult_t [y,"DHN_HP_ELEC", t] +F_Mult_t [y,"DEC_HP_ELEC", h, 
			td]) ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "HPs", sum{t in PERIODS, t
			}(-layers_in_out["DHN_HP_ELEC","ELECTRICITY"] *F_Mult_t [y,"DHN_HP_ELEC", t]   - 
			layers_in_out["DEC_HP_ELEC","ELECTRICITY"] *F_Mult_t [y,"DEC_HP_ELEC", t]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"H2_ELECTROLYSIS", t]  ) > 10 then
			{
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Electrolysis", sum{t in PERIODS, t
			}(-layers_in_out["H2_ELECTROLYSIS","ELECTRICITY"] *F_Mult_t [y,"H2_ELECTROLYSIS", t]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
				ifF_Mult [y,"SEASONAL_H2"] > 0.001 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Electrolysis" , "H2 sto.", sum{t in PERIODS, t
					}(Storage_In[y,"SEASONAL_H2", "H2", t]  ) / 1000 , 
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
					printf "%s,%s,%.2f,%s,%s,%s\n", "H2 sto." , "H2", sum{t in PERIODS, t
					}(Storage_Out[y,"SEASONAL_H2", "H2", t]*storage_eff_out [y,"SEASONAL_H2","H2"]  ) / 1000 , 
					"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
				}
				printf "%s,%s,%.2f,%s,%s,%s\n", "Electrolysis" , "H2", sum{t in PERIODS, t
				}(layers_in_out["H2_ELECTROLYSIS","H2"] *F_Mult_t [y,"H2_ELECTROLYSIS", t] -   Storage_Out[y,"SEASONAL_H2", "H2", t]*storage_eff_out [y,"SEASONAL_H2","H2"]  ) / 1000 , 
				"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			}
			
			if sum{t in PERIODS}(F_Mult_t [y,"DEC_DIRECT_ELEC", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat LT Dec", sum{t in PERIODS, t
			}(layers_in_out["DEC_DIRECT_ELEC","HEAT_LOW_T_DECEN"] *F_Mult_t [y,"DEC_DIRECT_ELEC", t]  
					- ((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] )))) / 1000 
			, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			if sum {t in PERIODS: Storage_In[y,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", t] > Storage_Out[y,"TS_DEC_DIRECT_ELEC", "HEAT_LOW_T_DECEN", t] } 
			    	((Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t])*(1-F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Dec. Sto", 		 
							sum {t in PERIODS} 
							((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] ))) / 1000 
						, "Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");		
			
			if sum{t in PERIODS}(F_Mult_t [y,"IND_DIRECT_ELEC", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Heat HT", sum{t in PERIODS, t
			}(layers_in_out["IND_DIRECT_ELEC","HEAT_HIGH_T"] *F_Mult_t [y,"IND_DIRECT_ELEC", t]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");		
			
			if sum{t in PERIODS}(F_Mult_t [y,"SYN_METHANATION", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Elec" , "Gas", sum{t in PERIODS, t
			}(-layers_in_out["SYN_METHANATION","ELECTRICITY"] *F_Mult_t [y,"SYN_METHANATION", t]  ) / 1000 , 
			"Electricity", "#00BFFF", "TWh" > (PathName & "/input2sankey.csv");
			
			# H2 use
			if sum{t in PERIODS}(F_Mult_t [y,"DEC_ADVCOGEN_H2", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2 prod" , "CHP", sum{t in PERIODS, t
			}(-layers_in_out["DEC_ADVCOGEN_H2","H2"] *F_Mult_t [y,"DEC_ADVCOGEN_H2", t]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"CAR_FUEL_CELL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob priv", sum{t in PERIODS, t
			}(-layers_in_out["CAR_FUEL_CELL","H2"] *F_Mult_t [y,"CAR_FUEL_CELL", t]  ) / 1000 , "H2", 
			"#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"BUS_COACH_FC_HYBRIDH2", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Mob public", sum{t in PERIODS, t
			}(-layers_in_out["BUS_COACH_FC_HYBRIDH2","H2"] *F_Mult_t [y,"BUS_COACH_FC_HYBRIDH2", t]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"TRUCK_FUEL_CELL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Freight", sum{t in PERIODS, t
			}(-layers_in_out["TRUCK_FUEL_CELL","H2"] *F_Mult_t [y,"TRUCK_FUEL_CELL", t]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"SYN_METHANATION", t]  ) > 10 then
			{
			printf "%s,%s,%.2f,%s,%s,%s\n", "H2" , "Gas", sum{t in PERIODS, t
			}(-layers_in_out["SYN_METHANATION","H2"] *F_Mult_t [y,"SYN_METHANATION", t]  ) / 1000 , 
			"H2", "#FF00FF", "TWh" > (PathName & "/input2sankey.csv");
			}
		
			# SNG use: 
			ifF_Mult [y,"SEASONAL_NG"] > 0.001 then {
					printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "SNG sto.", sum{t in PERIODS, t
					}(Storage_In[y,"SEASONAL_NG", "NG", t]  ) / 1000 , 
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
					printf "%s,%s,%.2f,%s,%s,%s\n", "SNG sto." , "Gas", sum{t in PERIODS, t
					}(Storage_Out[y,"SEASONAL_NG", "NG", t]*storage_eff_out [y,"SEASONAL_NG","NG"]  ) / 1000 , 
					"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			}
			
#			printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "NG", sum{t in PERIODS, t
#			}(layers_in_out["SYN_METHANATION","NG"] *F_Mult_t [y,"SYN_METHANATION", t] -layers_in_out["SYN_METHANATION","H2"] *F_Mult_t [y,"SYN_METHANATION", t] -   Storage_In[y,"SEASONAL_NG", "NG", t]  ) / 1000 , 
#			"NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");



	
			#------------------------------------------
			# SANKEY - HEATING
			#------------------------------------------
			# CHP
			if sum{i in COGEN, t in PERIODS}(F_t[y,i, t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Elec", sum{i in COGEN, t in PERIODS, t
			}(layers_in_out[i,"ELECTRICITY"] *F_Mult_t [y,i, t]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"DEC_COGEN_GAS", t] +F_Mult_t [y,"DEC_COGEN_OIL", h, 
			td] +F_Mult_t [y,"DEC_ADVCOGEN_GAS", t] +F_Mult_t [y,"DEC_ADVCOGEN_H2", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat LT Dec", 
					sum{i in COGEN, t in PERIODS}
						(layers_in_out[i,"HEAT_LOW_T_DECEN"] *F_Mult_t [y,i, t]  
						 -((max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] )))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum {t in PERIODS} 
								    ((max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] )))> 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Dec. Sto", 
					sum{i in COGEN, t in PERIODS}
						((max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
							(max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] ))
						) / 1000 
						, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			
			if sum{t in PERIODS}((F_Mult_t [y,"DHN_COGEN_GAS", t] +F_Mult_t [y,"DHN_COGEN_WOOD", 
			t] +F_Mult_t [y,"DHN_COGEN_WASTE", t]) +F_Mult_t [y,"DHN_COGEN_WET_BIOMASS", t])   > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "DHN", sum{i in COGEN, t in PERIODS, t
			}(layers_in_out[i,"HEAT_LOW_T_DHN"] *F_Mult_t [y,i, t]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_COGEN_GAS", t] +F_Mult_t [y,"IND_COGEN_WOOD", 
			t] +F_Mult_t [y,"IND_COGEN_WASTE", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "CHP" , "Heat HT", sum{i in COGEN, t in PERIODS, t
			}(layers_in_out[i,"HEAT_HIGH_T"] *F_Mult_t [y,i, t]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			(PathName & "/input2sankey.csv");
			
			# HPs
			if sum{t in PERIODS}((F_Mult_t [y,"DEC_HP_ELEC", t] +F_Mult_t [y,"DEC_THHP_GAS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Heat LT Dec", 
					sum{t in PERIODS}
					((layers_in_out["DEC_HP_ELEC","HEAT_LOW_T_DECEN"] *F_Mult_t [y,"DEC_HP_ELEC", t]   +
					layers_in_out["DEC_THHP_GAS","HEAT_LOW_T_DECEN"] *F_Mult_t [y,"DEC_THHP_GAS", t]  
					-((max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
			     	  (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] )))
					) / 1000 ) 
					, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"DHN_HP_ELEC", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "DHN", sum{t in PERIODS, t
			}((layers_in_out["DHN_HP_ELEC","HEAT_LOW_T_DHN"] *F_Mult_t [y,"DHN_HP_ELEC", t]  ) / 1000  - ( 
			(Storage_In [y,"TS_DEC_HP_ELEC", "ELECTRICITY", t]) )/ 1000), "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
				# Storage
			if sum {t in PERIODS} 
			    		((max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
			     	    (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] ))) >10 then
						printf "%s,%s,%.2f,%s,%s,%s\n", "HPs" , "Dec. Sto", 		 
							sum {t in PERIODS} 
							((max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
							 (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] )))/1000
							,"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");	
			
			
			
			
			# Biofuels			
			
			if sum{t in PERIODS}((F_Mult_t [y,"PYROLYSIS", h, 
			td])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Elec", sum{t in PERIODS, t
			}(layers_in_out["PYROLYSIS","ELECTRICITY"] *F_Mult_t [y,"PYROLYSIS", t]  ) / 1000 , "Electricity", "#00BFFF", "TWh" > 
			(PathName & "/input2sankey.csv");
			#if sum{t in PERIODS}((F_Mult_t [y,"GASIFICATION_SNG", t])  ) > 10 then
			#	printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Boilers", sum{t in PERIODS, t
			#}(layers_in_out["GASIFICATION_SNG","NG"] *F_Mult_t [y,"GASIFICATION_SNG", t]  ) / 1000 , "NG", 
			#"#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"PYROLYSIS", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Biofuels" , "Boilers", sum{t in PERIODS, t
			}(layers_in_out["PYROLYSIS","LFO"] *F_Mult_t [y,"PYROLYSIS", t]  ) / 1000 , "Oil", "#8B008B", "TWh" 
			> (PathName & "/input2sankey.csv");
			
			
			# Boilers
			if sum{t in PERIODS}((F_Mult_t [y,"DEC_BOILER_GAS", t] +F_Mult_t [y,"DEC_BOILER_WOOD", 
			t] +F_Mult_t [y,"DEC_BOILER_OIL", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat LT Dec", 
							sum{i in BOILERS, t in PERIODS}
							   (layers_in_out[i,"HEAT_LOW_T_DECEN"] *F_Mult_t [y,i, t]  
							    -((max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
								  (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
								  (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] )))
									 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum {t in PERIODS} 
								    ((max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] ))) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Dec. Sto", 
								sum {t in PERIODS} 
								    ((max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
								     (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] ))
								 ) / 1000 ,
						"Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			
			
			if sum{t in PERIODS}((F_Mult_t [y,"DHN_BOILER_GAS", t] +F_Mult_t [y,"DHN_BOILER_WOOD", 
			t] +F_Mult_t [y,"DHN_BOILER_OIL", t])  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "DHN", sum{i in BOILERS, t in PERIODS, t
			}(layers_in_out[i,"HEAT_LOW_T_DHN"] *F_Mult_t [y,i, t]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > 
			(PathName & "/input2sankey.csv");
			if sum{t in PERIODS}((F_Mult_t [y,"IND_BOILER_GAS", t] +F_Mult_t [y,"IND_BOILER_WOOD", 
			t] +F_Mult_t [y,"IND_BOILER_OIL", t] +F_Mult_t [y,"IND_BOILER_COAL", t] +F_Mult_t [y,"IND_BOILER_WASTE", t])  ) > 10 
			then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Boilers" , "Heat HT", sum{i in BOILERS, t in PERIODS, t
			}(layers_in_out[i,"HEAT_HIGH_T"] *F_Mult_t [y,i, t]  ) / 1000 , "Heat HT", "#DC143C", "TWh" > 
			(PathName & "/input2sankey.csv");
			

			if sum {t in PERIODS, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_In[y,i, "HEAT_LOW_T_DECEN", t] < Storage_Out[y,i, "HEAT_LOW_T_DECEN", t] } 
									(Storage_Out[y,i , "HEAT_LOW_T_DECEN", t] - Storage_In[y,i , "HEAT_LOW_T_DECEN", t]) > 10 then
			   printf "%s,%s,%.2f,%s,%s,%s\n", "Dec. Sto" , "Heat LT Dec", sum {t in PERIODS, i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DECEN"]: Storage_In[y,i, "HEAT_LOW_T_DECEN", t] < Storage_Out[y,i, "HEAT_LOW_T_DECEN", t] } 
									(Storage_Out[y,i , "HEAT_LOW_T_DECEN", t] - Storage_In[y,i , "HEAT_LOW_T_DECEN", t])/1000 , "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			
			# DHN 
			if sum{t in PERIODS}(End_Uses [y,"HEAT_LOW_T_DHN", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Heat LT DHN", sum{t in PERIODS} 
				(sum {i in TECHNOLOGIES diff STORAGE_TECH } (layers_in_out[i, "HEAT_LOW_T_DHN"] *F_Mult_t [y,i, t]  ) 
				- Network_losses [y,"HEAT_LOW_T_DHN", t]   
				- sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"]} (Storage_In[y,i, "HEAT_LOW_T_DHN", t])) / 1000
				, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(Network_losses [y,"HEAT_LOW_T_DHN", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "Loss DHN", sum{t in PERIODS}(Network_losses 
			[y,"HEAT_LOW_T_DHN", t]  ) / 1000 , "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			# DHN storage :
			# Sto in  : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS} (Storage_In[y,i, "HEAT_LOW_T_DHN", t])
			# Sto out : sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS} (Storage_Out[y,i, "HEAT_LOW_T_DHN", t])
			if sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS}(Storage_In[y,i, "HEAT_LOW_T_DHN", t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN" , "DHN Sto", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS} (Storage_In[y,i, "HEAT_LOW_T_DHN", t])/1000
				, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
			if sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS}(Storage_Out[y,i, "HEAT_LOW_T_DHN", t]) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "DHN Sto" , "Heat LT DHN", sum {i in STORAGE_OF_END_USES_TYPES["HEAT_LOW_T_DHN"],t in PERIODS} (Storage_Out[y,i, "HEAT_LOW_T_DHN", t])/1000
				, "Heat LT", "#FA8072", "TWh" > (PathName & "/input2sankey.csv");
						#Storage Dec :
					
			#------------------------------------------
			# SANKEY - Non-Energy use
			#------------------------------------------
			
			if sum{t in PERIODS}(F_Mult_t [y,"NON_ENERGY_NG", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Gas" , "Non-Energy", sum{t in PERIODS} 
				F_Mult_t [y,"NON_ENERGY_NG", t] /1000, "NG", "#FFD700", "TWh" > (PathName & "/input2sankey.csv");
			if sum{t in PERIODS}(F_Mult_t [y,"NON_ENERGY_OIL", t]  ) > 10 then
				printf "%s,%s,%.2f,%s,%s,%s\n", "Oil" , "Non-Energy", sum{t in PERIODS} 
				F_Mult_t [y,"NON_ENERGY_OIL", t] /1000 , "Oil","#8B008B", "TWh" > (PathName & "/input2sankey.csv");
			
			#STORAGE DECENTRALISED :
			# inputs : 
			#     -Direct elec : sum {t in PERIODS} 
			#						((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] )))
			#     -HPs         : sum {t in PERIODS}         
			#						((max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] )))
			#     -Boilers     : sum {t in PERIODS} 
			#					    ((max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] )))
			#	  -CHP_dec     : sum {t in PERIODS} 
			#					    ((max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(1-F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] )))
			#     -DEC_SOLAR   : sum {t in PERIODS} 
			#						((max(Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_DIRECT_ELEC"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_DIRECT_ELEC" , "HEAT_LOW_T_DECEN", t] ))+
			#						 (max(Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_HP_ELEC"      ,t]  /max(0.0001,Storage_In[y,"TS_DEC_HP_ELEC"     , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_THHP_GAS"     ,t]  /max(0.0001,Storage_In[y,"TS_DEC_THHP_GAS"    , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_GAS"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_GAS"  , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_WOOD"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_WOOD" , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_BOILER_OIL"   ,t]  /max(0.0001,Storage_In[y,"TS_DEC_BOILER_OIL"  , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_GAS"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_GAS"   , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_GAS" ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_GAS", "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_COGEN_OIL"    ,t]  /max(0.0001,Storage_In[y,"TS_DEC_COGEN_OIL"   , "HEAT_LOW_T_DECEN", t] ))+
			#					     (max(Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] - Storage_Out[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t],0))*(  F_t_Solar[y,"DEC_ADVCOGEN_H2"  ,t]  /max(0.0001,Storage_In[y,"TS_DEC_ADVCOGEN_H2" , "HEAT_LOW_T_DECEN", t] )))
			# outputs :
			# 	  -Sto_out     : sum {t in PERIODS, i in TS_DEC} 
			#						(max{0,Storage_Out[y,i , "HEAT_LOW_T_DECEN", t] - Storage_In[y,i , "HEAT_LOW_T_DECEN", t]})
			
	*/		
			
		}# END SAVING
			

}
#End cartography loop